package me.d3x.mobileapp.util;


import androidx.appcompat.app.AppCompatActivity;
import androidx.viewpager2.widget.ViewPager2;

import com.android.volley.RequestQueue;

import android.content.Intent;
import android.os.Handler;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

import me.d3x.mobileapp.MainActivity;
import me.d3x.mobileapp.R;
import me.d3x.mobileapp.data.QSong;
import me.d3x.mobileapp.data.QUser;
import me.d3x.mobileapp.data.SongViewAdapter;

public class Qtify {
    /*
    TODO:
        - Camera QR code scan to open room automatically (QR Code already generated by backend and points to https://q.d3x.me/?room={room_number})
        - Add button to accountactivity to display account_view
     */
    private static volatile Qtify instance;

    private QUser user = null;
    private QUser _session = null;
    private RequestQueue reqQueue;
    private List<QSong> cachedSongs;
    private SongViewAdapter adapter;
    private ViewPager2 pager;
    private boolean verbose = false;
    private AppCompatActivity activity;
    private Qutils.ListSource listSource = Qutils.ListSource.NO_DATA;
    private JSONObject S_API_CREDS = null;

    private int roomNumber = 1;
    private volatile boolean refreshAllowed = true;

    public static Qtify getInstance() {
        Qtify result = instance;
        if(result == null){
            synchronized (Qtify.class){
                result = instance;
                if (result == null){
                    instance = result = new Qtify();
                }
            }
        }
        return result;
    }

    public void cacheHandshakeResults(JSONObject j){
        this.S_API_CREDS = j;
    }

    public JSONObject getAPICreds(){
        if(this.S_API_CREDS == null)
            this.S_API_CREDS = new JSONObject();
        return this.S_API_CREDS;
    }

    public void storeActiveUser(){
        if(user != null){
            try {
                this._session = this.user.copy();
                this.user = null;
            }catch(JSONException e){e.printStackTrace();}
        }
    }

    public void retrieveStoredUser(){
        if(user == null && _session != null){
            try{
                this.user = this._session.copy();
                this._session = null;
            }catch(JSONException e){e.printStackTrace();}
        }
    }

    public void logout(){
        this.user = null;
        this._session = null;
        this.listSource = Qutils.ListSource.NO_DATA;
        Intent intent = new Intent(this.activity, MainActivity.class);
        this.activity.startActivity(intent);
    }

    public int getTabLayout(){
        return R.layout.activity_list;
    }

    public List<QSong> getSongCache(){
        if(this.user == null)
            return this.cachedSongs();
        switch(this.listSource){
            case USER_SONGS:
                return this.user.getCachedRequests();
            case USER_BLOCKED:
                return this.user.getCachedBlocklist();
        }
        return this.cachedSongs();
    }

    public void setListSource(Qutils.ListSource srcType){
        this.listSource = srcType;
    }

    public Qutils.ListSource getListSource(){
        return this.listSource;
    }

    public int getCardLayout(){
        switch(this.listSource){
            case USER_SONGS:
                return R.layout.song_card_approve;
            case USER_BLOCKED:
                return R.layout.song_card_block;
            default:
                return R.layout.song_card_request;
        }
    }

    public AppCompatActivity getActivity() { return activity; }

    public void setActivity(AppCompatActivity activity) { this.activity = activity; }

    public void setVerbose(boolean flag){ this.verbose = flag; }

    public boolean isVerbose(){ return this.verbose; }

    public void setUser(QUser user){
        this.user = user;
    }

    public QUser getUser(){
        return this.user;
    }

    public void setReqQueue(RequestQueue reqQueue){
        this.reqQueue = reqQueue;
    }

    public RequestQueue getQueue(){
        return this.reqQueue;
    }

    public int getRoomNumber() {
        return roomNumber;
    }

    public void setRoomNumber(int roomNumber) {
        this.roomNumber = roomNumber;
    }

    public SongViewAdapter getAdapter() {
        return adapter;
    }

    public void setAdapter(SongViewAdapter adapter) {
        this.adapter = adapter;
    }

    public void setPager(ViewPager2 pager){
        this.pager = pager;
    }

    public ViewPager2 getPager(){
        return this.pager;
    }

    public void refreshLock(int durationMS, Runnable task){
        this.refreshAllowed = false;
        task.run();
        new Handler().postDelayed(()->{
            this.refreshAllowed = true;
        }, durationMS);
    }

    public boolean canRefresh(){
        return this.refreshAllowed;
    }

    public synchronized List<QSong> cachedSongs(){
        if(this.cachedSongs == null)
            this.cachedSongs = new ArrayList<QSong>();
        return this.cachedSongs;
    }

    public List<QSong> cacheSongs(List<QSong> songs, boolean clearFirst, boolean notify){
        int tsize = this.cachedSongs().size();
        int total = songs.size();
        if(clearFirst) {
            total += tsize;
            this.cachedSongs().clear();
        }
        this.cachedSongs().addAll(songs);
        if(this.adapter != null && notify)
            this.adapter.notifyItemRangeChanged(total - this.cachedSongs().size(), total);
        setListSource(Qutils.ListSource.SONG_SEARCH);
        return this.cachedSongs();
    }

    public List<QSong> cacheSongs(List<QSong> songs, boolean notify){
        return cacheSongs(songs, true, notify);
    }

    public List<QSong> cacheSongs(List<QSong> songs){
        return cacheSongs(songs, true, true);
    }
}
